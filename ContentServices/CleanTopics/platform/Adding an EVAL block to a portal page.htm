<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>You can add an #EVAL[ ] block to a portal page to add JavaScript-based extensions to the page. You can use an #EVAL[ ] block when you want to use JavaScript expressions to generate HTML. An #EVAL[ ] block returns a String. You can use server-side Platform APIs in an #EVAL[ ] block. See Using EVAL blocks for more information about #EVAL[ ] blocks. See Server-side API for more information about server-side Platform APIs. To add an #EVAL[ ] block to a page: Open the page editor in one of the following ways: From the portal view, click Edit in the page table next to the page you want to edit. From the portal page view, click Edit. The page editor opens. Drag New Script Component from the left column to the location where you want to add the #EVAL[ ] block. A new &lt;Script Component&gt; appears in the page. The component can be in its own section or can be added to an existing section, depending on the page type and existing content. In the following graphic, the component is added to the default section of a generic page: Click Edit in the &lt;Script Component&gt;. The Edit Script dialog opens: Add the JavaScript #EVAL[ ] block to the text area. You can use the Template Helper to generate tokens for IDs, URLs, and links you want to use in the block. When you are finished adding the #EVAL[ ] block, click Save in the Edit Script dialog and click Save in the page editor. The following #EVAL[ ] block: Defines a function f1(). The function uses the server-side query API to execute a SELECT query that returns the id, name, and author fields from Title records. The function then loops through the query results and generates a buffer containing an HTML table that displays the title and author of each Title record. Each displayed title links to the portal's Object View page that displays information about a single title. The link uses tokens for the portal, the portal's Object View page, and the current Title record ID. The function returns the resulting HTML. Finally, the #EVAL[ ] block calls the function. #EVAL[ function f1() { var arr = rbv_api.selectQuery("SELECT id,name,author FROM title_lb", 1000); var buff = '&lt;table cellpadding=5&gt;&lt;tr&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Author&lt;/th&gt;&lt;/tr&gt;\n'; for (var k=0; k&lt;arr.length; k++) buff += '&lt;tr&gt;&lt;td&gt; &lt;a href="portal.jsp?c={!#CURR_CUSTM.id} &amp;p={!#PORTAL.125233463.#id}&amp;g={!#PORTAL.125233463.127055194#id} &amp;id='+arr[k][0]+'"&gt;' +arr[k][1]+'&lt;/a&gt;&lt;/td&gt;'+'&lt;td&gt;'+arr[k][2]+'&lt;/td&gt;&lt;/tr&gt;\n'; buff += '&lt;/table&gt;\n'; return buff; } f1(); ] The resulting portal page looks like the following:</body>
</html>