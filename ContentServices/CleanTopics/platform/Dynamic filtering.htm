<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>You can dynamically apply a filter to a view on an application page. This includes views on record list and selector pages and lists of related records on view pages. To define a filter, click Filter in the toolbar and select one of the options from the drop-down menu. This allows you to temporarily modify the filter conditions of the view without changing the saved version. For information about standard filters and filter expressions, see Filter criteria . For information about formula filters, see Filtering by formula . Click Apply Filter to reload the view once you have made changes and click Clear Filters to go back to the default filter conditions of the saved view. Administrators can control whether the control for advanced filter options (Standard, Formula, and Expression) is visible on the page by setting the property Hide Advanced Filtering on the view component in the page editor. They can also disable filtering on the page by setting the property Disable Filtering on the view control. Administrators can also control whether advanced filter options are available using the following JavaScript properties: showAdvancedFilterTypes — Determines whether the control for advanced filter types is displayed showBooleanOperators — Determines whether the control for Boolean operators is displayed CustomEvent for Dynamic Filter Rendering You can delay rendering the filter section when using for the first time. If you have JavaScript to customize filter component, adapt it to run the code after the filter component is rendered. You need to listen to the custom event rbs_dynamicFilterRendered and execute your customization code in the callback function as exemplified below. &lt;script&gt;
try { if (!rbf_isNewUI()) { throw 'This Script is written for New UI'; } var onFilterRender = function ( event, eventData) { // Now customize the filter the way you want. // Event Data: { filterEle: theFilterElement, cellId: theCellId, cellOrgId: theCellOriginalId } }; rb.newui.util.addEventListener(rb.newui.util.customEvents.rbs_dynamicFilterRendered, onFilterRender); }
catch (err) { if (console) { console.log(err); }
}
&lt;/script&gt;</body>
</html>