<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Developing a third-party widget In addition to the in-built React UI widgets, you can now use widgets developed by you to enhance your user experience. Platform enables you to add widgets designed by you to the UI configurator and use them across all the pages in your application. The high-level steps for developing a third-party widget are as follows: Create a React application. Create a config-overrides.js file with the following content in the root folder. This file is used to generate a single js file while building the project instead of chunks. Copy module.exports = { webpack: (config, env) =&gt; { config.optimization.runtimeChunk = false; config.optimization.splitChunks = { cacheGroups: { default: false, }, }; config.output.filename = "static/js/[name].js"; config.plugins[5].options.filename = "static/css/[name].css"; config.plugins[5].options.moduleFilename = () =&gt; "static/css/main.css"; return config; }, }; Create an src/serviceWorker.js file and add the following content. This file is used to register and unregister a third-party widget. Copy const isLocalhost = Boolean( window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match( /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/ ) ); export function register(config) { if (process.env.NODE_ENV === 'production' &amp;&amp; 'serviceWorker' in navigator) { const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href); if (publicUrl.origin !== window.location.origin) { return; } window.addEventListener('load', () =&gt; { const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`; if (isLocalhost) { checkValidServiceWorker(swUrl, config); navigator.serviceWorker.ready.then(() =&gt; { console.log( 'This web app is being served cache-first by a service ' ); }); } else { registerValidSW(swUrl, config); } }); } } function registerValidSW(swUrl, config) { navigator.serviceWorker .register(swUrl) .then(registration =&gt; { registration.onupdatefound = () =&gt; { const installingWorker = registration.installing; if (installingWorker == null) { return; } installingWorker.onstatechange = () =&gt; { if (installingWorker.state === 'installed') { if (navigator.serviceWorker.controller) { console.log( 'New content is available and will be used when all ' ); if (config &amp;&amp; config.onUpdate) { config.onUpdate(registration); } } else { console.log('Content is cached for offline use.'); if (config &amp;&amp; config.onSuccess) { config.onSuccess(registration); } } } }; }; }) .catch(error =&gt; { console.error('Error during service worker registration:', error); }); } function checkValidServiceWorker(swUrl, config) { fetch(swUrl, { headers: { 'Service-Worker': 'script' }, }) .then(response =&gt; { const contentType = response.headers.get('content-type'); if ( response.status === 404 || (contentType != null &amp;&amp; contentType.indexOf('javascript') === -1) ) { navigator.serviceWorker.ready.then(registration =&gt; { registration.unregister().then(() =&gt; { window.location.reload(); }); }); } else { registerValidSW(swUrl, config); } }) .catch(() =&gt; { console.log( 'No internet connection found. App is running in offline mode.' ); }); } export function unregister() { if ('serviceWorker' in navigator) { navigator.serviceWorker.ready .then(registration =&gt; { registration.unregister(); }) .catch(error =&gt; { console.error(error.message); }); } } Modify index.js and add the following content. Replace {id} with the widget ID. For example, window.renderMyApp. Copy import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import App from './App'; import * as serviceWorker from './serviceWorker'; window.render{id} = (containerId, data, uiSchema) =&gt; { ReactDOM.render( &lt;App data={data} uiSchema={uiSchema}/&gt;, document.getElementById(containerId), ); serviceWorker.unregister(); }; window.unmount{id} = containerId =&gt; { ReactDOM.unmountComponentAtNode(document.getElementById(containerId)); }; Run the command npm install --save react-app-rewired in your workspace terminal to install react-app-rewired. Modify package.json to build into a single file. Copy "scripts": { "start": "react-app-rewired start", "build": "react-app-rewired build", "test": "react-scripts test", "eject": "react-scripts eject" } Run the command npm run-script build to build the application. Note: Running the above command auto-generates a build folder. Go to &lt;root folder&gt;/build/manifest.json, and ensure that the contents in this file are in the files node, as shown in the screenshot below. Adding a third-party widget to the Platform You can add a widget designed by you to the UI configurator alongside the in-built React UI widgets, so that it is readily available to use whenever needed. The procedure to add a widget is as follows: On the System tab, click +Widget on the Widgets subtab. On the Widget Indexes tab of the Add Widget dialog box, add details such as the widget ID, name, description, thumbnail, and image. Click Next. Note:Every widget has a unique ID. The Name and Description you provide here is displayed in the UI. The Thumbnail is a smaller graphical representation of the Image. Add required fields on the Widget Schema tab by clicking the + button and filling in details such as the field name, key, and type. For example, in the case of Quarterly Revenue Growth, we would need 2 fields primarily to measure the change in sales from one quarter to another – Revenue and Quarter. In the case of student marks, we would need fields such as Student Name, Marks, Subject, etc. Note:Platform currently supports the field types, String and Number. Similarly, UI properties can also be added to change the appearance and presentability of the widget. These include the widget title, color, etc. Note:UI properties can be of 2 types - String and Color. Click the – button to remove a field/ UI property. Sample JSON data is used for rendering the widget in the Design tab of the UI Configurator. Click Next after filling in all 3 sections of the Widget Schema tab. On the Widget Build tab, upload the node js application build folder contents as a ZIP file to the Platform, and click Submit . Note:Instead of zipping the build folder directly, the contents of the build folder must be added to a ZIP file. This is so that when the ZIP file is extracted, its contents get extracted directly. Enjoy using your widget from the UI Configurator! For more information, see UI Configurator . Editing a third-party widget Platform enables you to edit a third-party widget in case you wish to make changes to it after adding it. To edit a third-party widget: Click Edit next to the widget that you want to edit on the Widgets subtab of the System tab. The Edit Widget Data dialog box opens. Select the required tab, and edit the necessary details. Click Submit on the Widget Build tab to save these changes. Deleting third-party widgets You can delete a third-party widget if you no longer wish to use it. To delete a third-party widget: Click Delete next to the widget you want to delete on the Widgets subtab of the System tab. The Delete Widget? dialog box opens. Select the Yes, I want to complete this action checkbox and click Continue to permanently delete the widget. A pop-up message notifying that the widget has been successfully deleted appears to confirm the deletion.</body>
</html>